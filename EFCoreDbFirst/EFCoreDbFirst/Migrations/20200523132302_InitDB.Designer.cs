// <auto-generated />
using System;
using EFCoreDbFirst.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCoreDbFirst.Migrations
{
    [DbContext(typeof(foxmmContext))]
    [Migration("20200523132302_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EFCoreDbFirst.Models.Emp", b =>
                {
                    b.Property<int>("Empno")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("empno")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnName("birthdate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Empno")
                        .HasName("PRIMARY");

                    b.ToTable("emp");
                });

            modelBuilder.Entity("EFCoreDbFirst.Models.Instrument", b =>
                {
                    b.Property<string>("InstrumentId")
                        .HasColumnName("InstrumentID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("ExchangeId")
                        .IsRequired()
                        .HasColumnName("ExchangeID")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("date");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("IsTrading")
                        .HasColumnType("tinyint");

                    b.Property<int>("MaxLimitOrderVolume")
                        .HasColumnType("int");

                    b.Property<int>("MaxMarketOrderVolume")
                        .HasColumnType("int");

                    b.Property<int>("MinLimitOrderVolume")
                        .HasColumnType("int");

                    b.Property<int>("MinMarketOrderVolume")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("date");

                    b.Property<double>("PriceTick")
                        .HasColumnType("double");

                    b.Property<string>("ProductClass")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'xxx'")
                        .HasComment("工具类型：期权、期货、现货等等")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'xxx'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UnderlyingInstrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UnderlyingInstrID")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'xxx'")
                        .HasComment("如果是期权，就会有标的合约")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("VolumeMultiple")
                        .HasColumnType("int")
                        .HasComment("合约乘数");

                    b.HasKey("InstrumentId");

                    b.ToTable("instrument");
                });

            modelBuilder.Entity("EFCoreDbFirst.Models.Marketmakerprop", b =>
                {
                    b.Property<string>("StrategyId")
                        .HasColumnName("StrategyID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("AllowAskTradedVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'10'");

                    b.Property<int>("AllowBidTradedVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'10'");

                    b.Property<int>("Ask5Volume1")
                        .HasColumnName("ask5Volume1")
                        .HasColumnType("int");

                    b.Property<string>("BaseInstrId")
                        .IsRequired()
                        .HasColumnName("baseInstrID")
                        .HasColumnType("varchar(50)")
                        .HasComment("relation instr")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Bid5Volume1")
                        .HasColumnName("bid5Volume1")
                        .HasColumnType("int");

                    b.Property<double>("ComboAskSpread")
                        .HasColumnType("double");

                    b.Property<double>("ComboAskSpreadOffset")
                        .HasColumnName("ComboAskSpread_offset")
                        .HasColumnType("double");

                    b.Property<double>("ComboBidSpread")
                        .HasColumnType("double");

                    b.Property<double>("ComboBidSpreadOffset")
                        .HasColumnName("ComboBidSpread_offset")
                        .HasColumnType("double");

                    b.Property<int>("DelayUpdateQuote")
                        .HasColumnType("int")
                        .HasComment(" unit is millisecond, 0 means not use this function,it will work when it is greater than 0 ");

                    b.Property<string>("DeltaHedge")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("'F'")
                        .IsFixedLength(true)
                        .HasMaxLength(1);

                    b.Property<string>("ExchangeId")
                        .IsRequired()
                        .HasColumnName("ExchangeID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FunctionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("'c'")
                        .IsFixedLength(true)
                        .HasComment("history： 'c' means can marketmaker ，‘s' just subscribe the market")
                        .HasMaxLength(1);

                    b.Property<string>("InstrumentId")
                        .IsRequired()
                        .HasColumnName("InstrumentID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("IsEnabed")
                        .HasColumnName("isEnabed")
                        .HasColumnType("tinyint");

                    b.Property<int>("JoinVolume1")
                        .HasColumnName("joinVolume1")
                        .HasColumnType("int");

                    b.Property<int>("JoinVolume2")
                        .HasColumnName("joinVolume2")
                        .HasColumnType("int");

                    b.Property<byte>("MarketMakerVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MarketSpread")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("marketSpread")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'")
                        .HasComment(" market spread or  quote spread greater equal than marketspread will stop marketmaker ");

                    b.Property<string>("MmorderType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MMOrderType")
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("'O'")
                        .IsFixedLength(true)
                        .HasComment(@"[O]rder,[Q]uote,[R]eQuote
")
                        .HasMaxLength(1);

                    b.Property<double>("MmpriceAskOffset")
                        .HasColumnName("MMPriceAskOffset")
                        .HasColumnType("double")
                        .HasComment(@"x * tickPrice used forMMPriceType. Mid 
");

                    b.Property<double>("MmpriceBidOffset")
                        .HasColumnName("MMPriceBidOffset")
                        .HasColumnType("double")
                        .HasComment(@"x * tickPrice used forMMPriceType. Mid 
");

                    b.Property<string>("MmpriceType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MMPriceType")
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("'J'")
                        .IsFixedLength(true)
                        .HasComment("[M]id,[J]oinMarket,[WeightAvg]")
                        .HasMaxLength(1);

                    b.Property<int>("MoveAsk5Lv")
                        .HasColumnName("MoveAsk5LV")
                        .HasColumnType("int");

                    b.Property<int>("MoveBid5Lv")
                        .HasColumnName("MoveBid5LV")
                        .HasColumnType("int");

                    b.Property<string>("OhedgeInstrId")
                        .IsRequired()
                        .HasColumnName("OHedge_InstrId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double>("OhedgeLostAskPrice")
                        .HasColumnName("OHedge_LostAskPrice")
                        .HasColumnType("double")
                        .HasComment("must greater than 0 ，means lost price of hedge order based market opposite price");

                    b.Property<double>("OhedgeLostBidPrice")
                        .HasColumnName("OHedge_LostBidPrice")
                        .HasColumnType("double")
                        .HasComment("must greater than 0 ，means lost price of hedge order based market opposite price");

                    b.Property<string>("OhedgeMode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OHedge_Mode")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'LastPaid'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("OhedgePayUpMaxCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OHedge_PayUpMaxCount")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'")
                        .HasComment("must greater equal 0 , integar, default = 1, e.g. : 2 means I will try to send a new stopLost order if first stopLost order is not traded");

                    b.Property<int>("OhedgePayUpStepTicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OHedge_PayUpStepTicks")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'")
                        .HasComment("must greater equal 0 , integar, default = 1");

                    b.Property<double>("OhedgePercentage")
                        .HasColumnName("OHedge_Percentage")
                        .HasColumnType("double");

                    b.Property<string>("OhedgePositionEffect")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OHedge_PositionEffect")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'OPEN'")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double>("OhedgePriceOffset1")
                        .HasColumnName("OHedge_PriceOffset1")
                        .HasColumnType("double");

                    b.Property<double>("OhedgePriceOffset2")
                        .HasColumnName("OHedge_PriceOffset2")
                        .HasColumnType("double")
                        .HasComment("less 0 means it is some ticks below market (e.g. more difficult to trade with market)");

                    b.Property<string>("PositionEffect")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("'OPEN'")
                        .HasComment("OPEN,CLOSE,CLOSE_TODAY,CLOSE_YESTERDAY")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("RefillPeriodMilli")
                        .HasColumnName("refillPeriodMilli")
                        .HasColumnType("int")
                        .HasComment("milliseconds");

                    b.Property<int>("RefillTime")
                        .HasColumnType("int")
                        .HasComment(@"refilltime for temporily trade stop
");

                    b.Property<string>("ThedgeInstrId")
                        .IsRequired()
                        .HasColumnName("THedge_InstrId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ThedgeMode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("THedge_Mode")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'LastPaid'")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("ThedgePositionEffect")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("THedge_PositionEffect")
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("'OPEN'")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<double>("ThedgePriceOffset")
                        .HasColumnName("THedge_PriceOffset")
                        .HasColumnType("double");

                    b.Property<double>("TickPrice")
                        .HasColumnName("tickPrice")
                        .HasColumnType("double");

                    b.Property<string>("TradeInstruId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasComment(@"when this instrid traded the strategy will stop temporily
")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TradeTypes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'M'")
                        .HasComment(@"which types trade will stop temporily
")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("StrategyId")
                        .HasName("PRIMARY");

                    b.ToTable("marketmakerprop");
                });

            modelBuilder.Entity("EFCoreDbFirst.Models.Spreadstatisticrules", b =>
                {
                    b.Property<string>("RuleId")
                        .HasColumnName("ruleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InstrId")
                        .IsRequired()
                        .HasColumnName("instrId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("SpreadTicks")
                        .HasColumnName("spreadTicks")
                        .HasColumnType("int");

                    b.Property<double>("TargetSec")
                        .HasColumnName("targetSec")
                        .HasColumnType("double");

                    b.Property<double>("TickPrice")
                        .HasColumnName("tickPrice")
                        .HasColumnType("double");

                    b.Property<string>("TradeTimeName")
                        .IsRequired()
                        .HasColumnName("tradeTimeName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Volume")
                        .HasColumnName("volume")
                        .HasColumnType("int");

                    b.HasKey("RuleId")
                        .HasName("PRIMARY");

                    b.ToTable("spreadstatisticrules");
                });

            modelBuilder.Entity("EFCoreDbFirst.Models.Tradetime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("BeginTime")
                        .HasColumnName("beginTime")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("EndTime")
                        .HasColumnName("endTime")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasComment("标识")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phase")
                        .HasColumnName("phase")
                        .HasColumnType("varchar(45)")
                        .HasComment("阶段，每个阶段的时间不可以重复")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("tradetime");
                });

            modelBuilder.Entity("EFCoreDbFirst.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastConnectTime")
                        .HasColumnName("lastConnectTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PassWord")
                        .HasColumnName("passWord")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasColumnName("userName")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("users");
                });
#pragma warning restore 612, 618
        }
    }
}
